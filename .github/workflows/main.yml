name: Build Cork App
on:
  workflow_dispatch:
jobs:
  build-macos:
    name: Build Cork for macOS
    runs-on: macos-latest 
    steps:
      - name: 1. Checkout repository
        uses: actions/checkout@v4
        
      - name: 2. Select Xcode 16
        run: |
          # Use the latest available Xcode 16.x
          if [ -d "/Applications/Xcode_16.3.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.3.app
            echo "Using Xcode 16.3"
          elif [ -d "/Applications/Xcode_16.2.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.2.app  
            echo "Using Xcode 16.2"
          else
            sudo xcode-select -s /Applications/Xcode.app
            echo "Using default Xcode"
          fi
          xcodebuild -version
          
      - name: 3. Install and set up Mise
        run: |
          curl https://mise.run | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          eval "$($HOME/.local/bin/mise activate bash)"
      
      - name: 4. Install Tuist via Mise
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          mise install tuist
          
      - name: 5. Generate Xcode Project
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          mise trust
          mise exec tuist@4.25.0 -- tuist install
          mise exec tuist@4.25.0 -- tuist generate --no-binary-cache
          
      - name: 6. Fix Asset Catalog Template Format Issues
        run: |
          echo "Fixing Asset Catalog template format issues..."
          
          # Create a Python script to downgrade SVG template formats
          cat > fix_svg_templates.py << 'EOF'
import os
import xml.etree.ElementTree as ET
import sys

def fix_svg_file(filepath):
    """Fix SVG template format version in SF Symbol files"""
    try:
        # Read the SVG file
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Parse as XML
        root = ET.fromstring(content)
        
        # Look for template format in metadata or other elements
        # This is a simple string replacement approach since the exact XML structure varies
        if 'templateFormat="6.0"' in content:
            print(f"Fixing template format in {filepath}")
            # Replace template format 6.0 with 5.0
            fixed_content = content.replace('templateFormat="6.0"', 'templateFormat="5.0"')
            
            # Write back the fixed content
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(fixed_content)
            return True
        return False
    except Exception as e:
        print(f"Error processing {filepath}: {e}")
        return False

def main():
    assets_path = "Cork/Assets.xcassets"
    if not os.path.exists(assets_path):
        print(f"Assets directory not found: {assets_path}")
        return
    
    fixed_count = 0
    
    # Walk through all .symbolset directories
    for root, dirs, files in os.walk(assets_path):
        if root.endswith('.symbolset') and any('custom.' in root for custom in ['custom.']):
            print(f"Checking symbolset: {root}")
            
            # Look for SVG files in the symbolset
            for file in files:
                if file.endswith('.svg'):
                    svg_path = os.path.join(root, file)
                    if fix_svg_file(svg_path):
                        fixed_count += 1
    
    print(f"Fixed {fixed_count} SVG files")

if __name__ == "__main__":
    main()
EOF
          
          # Run the Python script to fix SVG template formats
          python3 fix_svg_templates.py
          
          # Alternative approach: Create empty placeholder Contents.json for problematic symbolsets
          # This prevents the build from failing while keeping the symbolsets in place
          ASSETS_PATH="Cork/Assets.xcassets"
          PROBLEMATIC_SYMBOLS=(
            "custom.shippingbox.badge.magnifyingglass.symbolset"
            "custom.macwindow.badge.xmark.symbolset"
            "custom.spigot.badge.xmark.symbolset"
            "custom.macwindow.badge.magnifyingglass.symbolset"
            "custom.apple.terminal.badge.magnifyingglass.symbolset"
            "custom.trash.triangle.fill.symbolset"
            "custom.terminal.badge.xmark.symbolset"
          )
          
          for symbol in "${PROBLEMATIC_SYMBOLS[@]}"; do
            symbol_path="$ASSETS_PATH/$symbol"
            if [ -d "$symbol_path" ]; then
              echo "Processing $symbol"
              # Backup original Contents.json if it exists
              if [ -f "$symbol_path/Contents.json" ]; then
                cp "$symbol_path/Contents.json" "$symbol_path/Contents.json.backup"
              fi
              
              # Create a simple Contents.json that won't cause template format issues
              cat > "$symbol_path/Contents.json" << 'JSONEOF'
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  },
  "symbols" : [
    {
      "idiom" : "universal"
    }
  ]
}
JSONEOF
              
              # Temporarily rename SVG files to prevent them from being processed
              find "$symbol_path" -name "*.svg" -exec mv {} {}.backup \; 2>/dev/null || true
            fi
          done
          
      - name: 7. Create Export Options Plist
        run: |
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>copy</string>
              <key>destination</key>
              <string>export</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>signingCertificate</key>
              <string>Sign to Run Locally</string>
          </dict>
          </plist>
          EOF
          
      - name: 8. Clean build folder
        run: |
          rm -rf ./build
          mkdir -p ./build
          
      - name: 9. Archive the App
        run: |
          xcodebuild archive -skipPackagePluginValidation \
            -workspace Cork.xcworkspace \
            -scheme "Self-Compiled" \
            -sdk macosx \
            -configuration Release \
            -archivePath ./build/Cork.xcarchive \
            -destination "platform=macOS,arch=x86_64" \
            ASSETCATALOG_COMPILER_GENERATE_ASSET_SYMBOLS=NO \
            ASSETCATALOG_COMPILER_OPTIMIZATION=time \
            VALIDATE_WORKSPACE=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            PROVISIONING_PROFILE_SPECIFIER="" \
            DEVELOPMENT_TEAM="" \
            | tee build.log
            
      - name: 10. Restore Asset Catalog Files
        if: always()
        run: |
          echo "Restoring original asset catalog files..."
          ASSETS_PATH="Cork/Assets.xcassets"
          
          # Restore original Contents.json files
          find "$ASSETS_PATH" -name "Contents.json.backup" | while read backup; do
            original="${backup%.backup}"
            mv "$backup" "$original"
            echo "Restored $(dirname "$original")/Contents.json"
          done
          
          # Restore SVG files
          find "$ASSETS_PATH" -name "*.svg.backup" | while read backup; do
            original="${backup%.backup}"
            mv "$backup" "$original"
            echo "Restored $(basename "$original")"
          done
          
      - name: 11. Check archive contents
        run: |
          if [ -d "./build/Cork.xcarchive" ]; then
            echo "Archive created successfully"
            ls -la ./build/Cork.xcarchive/
          else
            echo "Archive not found, checking build log:"
            cat build.log || echo "No build log found"
            exit 1
          fi
          
      - name: 12. Export the App
        run: |
          xcodebuild -exportArchive \
            -archivePath ./build/Cork.xcarchive \
            -exportPath ./build \
            -exportOptionsPlist ExportOptions.plist \
            | tee export.log
            
      - name: 13. Verify exported app
        run: |
          if [ -d "./build/Cork.app" ]; then
            echo "App exported successfully"
            ls -la ./build/Cork.app/
            echo "App size: $(du -sh ./build/Cork.app)"
          else
            echo "App not found, checking export log:"
            cat export.log || echo "No export log found"
            echo "Contents of build directory:"
            ls -la ./build/
            exit 1
          fi
          
      - name: 14. Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            build.log
            export.log
          retention-days: 7
          
      - name: 15. Upload App as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Cork-App
          path: ./build/Cork.app
