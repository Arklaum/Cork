name: Build Cork App

on:
  workflow_dispatch:

jobs:
  build-macos:
    name: Build Cork for macOS
    runs-on: macos-latest
    
    steps:
      - name: 1. Checkout repository
        uses: actions/checkout@v4

      - name: 2. Select latest available Xcode
        run: |
          sudo xcode-select -s /Applications/$(ls /Applications | grep Xcode | tail -n 1)
          echo "Using $(xcode-select -p)"
          xcodebuild -version

      - name: 3. Install and set up Mise
        run: |
          curl https://mise.run | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: 4. Install Tuist via Mise
        run: mise install tuist

      - name: 5. Generate Xcode Project
        run: |
          mise trust
          mise exec tuist@4.25.0 -- tuist install
          mise exec tuist@4.25.0 -- tuist generate --no-binary-cache

      - name: 6. Workaround for Asset Catalog Incompatibility
        run: |
          echo "Applying workaround for incompatible asset catalog symbols..."
          ASSETS_PATH="Cork/Assets.xcassets"
          
          # List of symbol sets that cause the build to fail due to incompatible template formats
          PROBLEMATIC_SYMBOLS=(
            "custom.shippingbox.badge.magnifyingglass.symbolset"
            "custom.macwindow.badge.xmark.symbolset"
            "custom.spigot.badge.xmark.symbolset"
            "custom.macwindow.badge.magnifyingglass.symbolset"
            "custom.apple.terminal.badge.magnifyingglass.symbolset"
            "custom.trash.triangle.fill.symbolset"
            "custom.terminal.badge.xmark.symbolset"
          )

          for symbol in "${PROBLEMATIC_SYMBOLS[@]}"; do
            symbol_path="$ASSETS_PATH/$symbol"
            if [ -d "$symbol_path" ]; then
              echo "Neutralizing assets in $symbol"
              # Temporarily rename the SVG file to prevent the compiler from finding it
              find "$symbol_path" -name "*.svg" -exec mv {} {}.bak \;
            fi
          done

      - name: 7. Create Export Options Plist
        run: |
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>mac-application</string>
              <key>destination</key>
              <string>export</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>signingCertificate</key>
              <string>Sign to Run Locally</string>
          </dict>
          </plist>
          EOF

      - name: 8. Archive the App
        run: |
          xcodebuild archive -skipPackagePluginValidation \
            -workspace Cork.xcworkspace \
            -scheme "Self-Compiled" \
            -sdk macosx \
            -configuration Release \
            -archivePath ./build/Cork.xcarchive

      - name: 9. Export the App
        run: |
          xcodebuild -exportArchive \
            -archivePath ./build/Cork.xcarchive \
            -exportPath ./build \
            -exportOptionsPlist ExportOptions.plist

      - name: 10. Create macOS-compatible Zip Archive
        run: |
          cd ./build
          ditto -c -k --sequesterRsrc --keepParent Cork.app Cork-App.zip
          cd ..
      
      - name: 11. Upload App as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Cork-App
          path: ./build/Cork-App.zip
